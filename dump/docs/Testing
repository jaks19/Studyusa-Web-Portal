BEFORE WRITING THE CODE, WOULD I HAVE THIS TEST? This helps identify what is actually
a unit test. If you would write it means it is key to that module, not between modules (integration)
Then write it. If you are testing something you had no idea would happen before working on this component,
more like something higher level the it should not be a unit test.

A unit test consists of three parts.

Arrange
Act
Assert

Mocha sets up and runs test
Chai is used for assertions (has a bunch of them)


When calling something that is async, e.g. mongoose find(),
(recall that in our dbopsservices we wrap such a call in a Promise that we await)
But here in a test if we are directly calling say mongoose save fn, then we can take the call back
For mocha to wait for the callback and end depending on the error or success,
We pass in a done argument (can name anything) that we call when the callback is done

describe('xxxxxxx', function() {
    it('should be invalid if name is empty', function(done) {
        var m = new Meme();

        m.validate(function(err) {
            expect(err.errors.name).to.exist;
            done();
        });
    });
});


When testing our functions that return promises that we await, we can use this kind of pattern,
where we await inside the mocha test

describe('#find()', function() {
  it('responds with matching records', async function() {
    const users = await db.find({ type: 'User' });
    users.should.have.length(3);
  });
});

Actually we can use await even up there in the first example. So either callback or await the promise.
Note that we also make the mocha fn async (this will be thrown as error if not done anyway)


Models untested: comment, file, notif




For a listener, HAVE to use the DONE indicator:

before(function(done) {
    mongoose.connect("mongodb://localhost/studyusa-portal");

    // await User.init();
    mongoose.connection.on('connected', function(){
        console.log('HJUGGJGJ');
        console.error('NOOOOOO');
        done();
    });
});

Since .on('connected') is a listener and does not return a promise because it is not bound to happen
Can wrap in promise, but more readable to just call done

Here is the promise wrapping version:
before(async function() {
    mongoose.connect("mongodb://localhost/studyusa-portal");

    await new Promise(function (resolve, reject) {
      mongoose.connection.on('connected', function(){
          console.log('YAAAA');
          resolve()
      });
    });
});

If something is used just once then just use the callback. Recall how async await is
useful mostly for refactoring and extracting methods and preventing endless callback nesting


var mlog = require("mocha-logger"); useful for long tests as adds a sequential message to console

EITHER THE TEST TAKES DONE ARGUMENT OR ASYNC, NOT BOTH! If going with done, everything
inside needs callbacks, no await
If make async and use await, cannot call done!!!!
Whaat can do is have an async function inside, sure, but call then on it and go into the callbacks
Example if have an async function helper and wanna use it just use and call .then


Sinon:
Restore a spy or stub at the end (stub.restore())
Sinon has sown assert that gives error messages tailored to what sinon does
(Not like chai that just compares values etc )

- Spy: allows original function to exist and just observe things related to it
var spy = sinon.spy(object, 'its function name');

- Stub: Changes original function for a complete fake
 var stub = sinon.stub(object, 'its function name');
 can yield a desired value (stub.yields(x,x,x,))
 Or just yield() to return (if stubbed fn had a callback, yield goes to callback)

We can even place a stub or spy at that callback

- Mock: Stubbing a whole object, not just a fn



Testing any function:
Give variety of acceptable inputs
Expect expected outputs
Mock anything in between that is outside of this method's duties (black-box the outside assuming everything correct from them)

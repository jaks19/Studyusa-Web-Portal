{"version":3,"sources":["../../routes/groups.js"],"names":["express","require","authServices","dbopsServices","groupServices","notifServices","Group","User","router","Router","mergeParams","get","confirmUserCredentials","req","res","findAllEntriesAndPopulate","groups","freeUsers","render","user","loggedIn","client","post","checkedUserIds","getCheckedUsers","groupName","body","name","newGroupData","createEntryAndSave","groupEntry","i","length","findOneEntryAndPopulate","checkedUserEntry","group","users","push","assignNotification","username","savePopulatedEntry","redirect","put","_id","params","groupId","foundGroup","foundUser","findEntryByIdAndRemove","pull","delete","foundUsers","thisUser","module","exports"],"mappings":"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","file":"groups.js","sourcesContent":["// Packages\nvar express = require(\"express\"),\n    authServices = require('../services/auth-services'),\n    dbopsServices = require('../services/dbops-services'),\n    groupServices = require('../services/group-services'),\n    notifServices = require('../services/notif-services');\n    \n// Models\nvar Group = require(\"../models/group\"),\n    User = require(\"../models/user\");\n\nlet router = express.Router({ mergeParams: true });\n\n// Index\nrouter.get('/', authServices.confirmUserCredentials, async function(req, res) {\n    let groups = await dbopsServices.findAllEntriesAndPopulate(Group, { }, [ 'users' ], req, res),\n        freeUsers = await dbopsServices.findAllEntriesAndPopulate(User, { 'group': 'noGroup' }, [ ], req, res);\n    res.render('./admin/groups', {\n        user: req.user,\n        freeUsers: freeUsers,\n        groups: groups,\n        loggedIn: true,\n        client: req.user\n    });\n});\n\n// New Group\nrouter.post('/', authServices.confirmUserCredentials, async function(req, res) {\n    let checkedUserIds = groupServices.getCheckedUsers(req, res),\n        groupName = req.body.name, \n        newGroupData = new Group({ name: groupName }),\n        groupEntry = await dbopsServices.createEntryAndSave(Group, newGroupData, req, res, false);\n    for (var i = 0; i < checkedUserIds.length; i++) {\n        let checkedUserEntry = await dbopsServices.findOneEntryAndPopulate(User, { '_id': checkedUserIds[i] }, [ ], req, res);\n        checkedUserEntry.group = groupName;\n        groupEntry.users.push(checkedUserEntry);\n        notifServices.assignNotification(req.user.username, groupName, 'group-add', checkedUserEntry.username, req);\n        dbopsServices.savePopulatedEntry(checkedUserEntry, req, res);\n    }\n    dbopsServices.savePopulatedEntry(groupEntry, req, res);\n    res.redirect('back');\n});\n\n// Add to Group\nrouter.put('/:groupId', authServices.confirmUserCredentials, async function(req, res) {\n    let checkedUserIds = groupServices.getCheckedUsers(req, res),\n        foundGroup = await dbopsServices.findOneEntryAndPopulate(Group, { _id: req.params.groupId }, [ 'users' ], req, res);\n        \n    for (var i = 0; i < checkedUserIds.length; i++) {\n        let checkedUserEntry = await dbopsServices.findOneEntryAndPopulate(User, { '_id': checkedUserIds[i] }, [ ], req, res);\n        checkedUserEntry.group = foundGroup.name;\n        foundGroup.users.push(checkedUserEntry);\n        dbopsServices.savePopulatedEntry(checkedUserEntry, req, res);\n        notifServices.assignNotification(req.user.username, foundGroup.name, 'group-add', checkedUserEntry.username, req);\n    }\n\n    dbopsServices.savePopulatedEntry(foundGroup, req, res);\n    res.redirect('back');\n});\n\n// Remove someone from his/her group\nrouter.get('/remove', authServices.confirmUserCredentials, async function(req, res) {\n    let foundUser = await dbopsServices.findOneEntryAndPopulate(User, { 'username': req.params.username }, [ ], req, res),\n        foundGroup = await dbopsServices.findOneEntryAndPopulate(Group, { 'name': foundUser.group }, [ ], req, res);\n    foundUser.group = 'noGroup';\n    dbopsServices.savePopulatedEntry(foundUser, req, res);\n    notifServices.assignNotification(req.user.username, foundGroup.name, 'group-remove', req.params.username, req);\n    if (foundGroup.users.length == 1) { await dbopsServices.findEntryByIdAndRemove(Group, foundGroup._id, req, res) }\n    else { foundGroup.users.pull(foundUser) }\n    dbopsServices.savePopulatedEntry(foundGroup, req, res);\n    res.redirect('back');\n});\n\n// Delete a Group\nrouter.delete('/:groupId', authServices.confirmUserCredentials, async function(req, res) {\n    let foundGroup = await dbopsServices.findOneEntryAndPopulate(Group, { '_id': req.params.groupId }, [ ], req, res),\n        foundUsers = await dbopsServices.findAllEntriesAndPopulate(User, { 'group': foundGroup.name }, [ ], req, res);\n    for (var i = 0; i < foundUsers.length; i++) {\n        let thisUser = foundUsers[i];\n        thisUser.group = 'noGroup';\n        dbopsServices.savePopulatedEntry(thisUser, req, res);\n        notifServices.assignNotification(req.user.username, foundGroup.name, 'group-delete', thisUser.username, req);\n    }\n    await dbopsServices.findEntryByIdAndRemove(Group, foundGroup._id, req, res);\n    res.redirect('back');\n});\n\nmodule.exports = router;"]}
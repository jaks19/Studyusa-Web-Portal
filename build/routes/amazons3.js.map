{"version":3,"sources":["../../routes/amazons3.js"],"names":["express","require","authServices","aws","router","Router","mergeParams","s3InitConfig","signatureVersion","endpoint","region","get","confirmUserCredentials","req","res","s3","S3","key","params","username","subTitle","fileName","s3Params","Bucket","process","env","S3_BUCKET","Key","Expires","ContentType","query","ACL","signedUrl","getSignedUrl","write","end","deleteObject","err","data","console","log","stack","flash","redirect","module","exports"],"mappings":"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","file":"amazons3.js","sourcesContent":["// Packages\nlet express = require(\"express\"),\n    authServices = require('../services/auth-services'),\n    aws = require('aws-sdk');\n\nlet router = express.Router({ mergeParams: true }),\n    s3InitConfig = { signatureVersion: 'v4', endpoint: 's3.us-east-2.amazonaws.com', region: 'us-east-2' };\n\n// Get signature for upload\nrouter.get('/upload/:fileName', authServices.confirmUserCredentials, async function(req, res) { \n    let s3 = new aws.S3(s3InitConfig),\n        key = req.params.username + '/' + req.params.subTitle + '/' + req.params.fileName,\n        s3Params = { Bucket: process.env.S3_BUCKET, Key: key, Expires: 60, ContentType: req.query['file-type'], ACL: 'private' },\n        signedUrl = s3.getSignedUrl('putObject', s3Params);\n    res.write(JSON.stringify({ signedUrl : signedUrl }));\n    res.end();\n});\n\n// Get signature for download\nrouter.get('/download/:fileName', authServices.confirmUserCredentials, async function(req, res) { \n    let s3 = new aws.S3(s3InitConfig),\n        key = req.params.username + '/' + req.params.subTitle + '/' + req.params.fileName,\n        s3Params = { Bucket: process.env.S3_BUCKET, Key: key, Expires: 60 },\n        signedUrl = s3.getSignedUrl('getObject', s3Params);\n    res.write(JSON.stringify({ signedUrl: signedUrl, fileName: req.params.fileName }));\n    res.end();\n});\n\n// Get signature for delete\nrouter.get('/delete/:fileName', authServices.confirmUserCredentials, async function(req, res) { \n    let s3 = new aws.S3(s3InitConfig),\n        key = req.params.username + '/' + req.params.subTitle + '/' + req.params.fileName,\n        s3Params = { Bucket: process.env.S3_BUCKET, Key: key };\n     s3.deleteObject(s3Params, function(err, data) {\n        if (err) { console.log(err, err.stack) }\n        else { \n            req.flash('success', 'File successfully deleted');\n            res.redirect('back');\n        }          \n    });\n});\n\nmodule.exports = router;"]}
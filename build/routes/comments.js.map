{"version":3,"sources":["../../routes/comments.js"],"names":["express","require","authServices","dbopsServices","notifServices","Submission","Comment","router","Router","mergeParams","post","confirmUserCredentials","req","res","subId","params","id","content","body","textareacontent","findOneEntryAndPopulate","foundSub","newC","username","user","createEntryAndSave","newComment","messages","push","savePopulatedEntry","assignNotification","title","redirect","_id","put","newText","commentId","foundComment","flash","delete","findEntryByIdAndRemove","module","exports"],"mappings":"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","file":"comments.js","sourcesContent":["// A 'Comment' is added to a submission to keep track of the thread\n// Packages\nvar express = require(\"express\"),\n    authServices = require('../services/auth-services'),\n    dbopsServices = require('../services/dbops-services'),\n    notifServices = require('../services/notif-services');\n\n// Models\nvar Submission = require(\"../models/submission\"),\n    Comment = require(\"../models/comment\");\n\nvar router = express.Router({ mergeParams: true });\n\n// New Comment\nrouter.post('/', authServices.confirmUserCredentials, async function(req, res) {\n    let subId = req.params.id,\n        content = req.body.textareacontent,\n        foundSub = await dbopsServices.findOneEntryAndPopulate(Submission, { '_id': subId }, ['user'], req, res),\n        newC = new Comment({ username: req.user.username, content: content }),\n        newComment =  await dbopsServices.createEntryAndSave(Comment, newC, req, res);\n    foundSub.messages.push(newComment);\n    dbopsServices.savePopulatedEntry(foundSub, req, res);\n    notifServices.assignNotification(req.user.username, foundSub.title, 'comment', req.params.username, req);\n    res.redirect('/index/' + foundSub.user.username + '/submit/' + foundSub._id);\n});\n\n// Edit Comment\nrouter.put('/:commentId/', authServices.confirmUserCredentials, async function(req, res) {\n    let newText = req.body.newText;\n    let foundComment = await dbopsServices.findOneEntryAndPopulate(Comment, {'_id': req.params.commentId}, [], req, res);\n    foundComment.content = newText;\n    dbopsServices.savePopulatedEntry(foundComment, req, res);\n    req.flash('success', 'Comment successfully changed');\n    res.redirect('back');\n});\n\n\n// Delete Comment\nrouter.delete('/:commentId/', authServices.confirmUserCredentials, async function(req, res) {\n    await dbopsServices.findEntryByIdAndRemove(Comment, req.params.commentId, req, res);\n    res.redirect('back');\n});\nmodule.exports = router;\n"]}
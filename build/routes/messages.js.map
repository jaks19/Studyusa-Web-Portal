{"version":3,"sources":["../../routes/messages.js"],"names":["express","require","authServices","notifServices","dbopsServices","User","Group","Message","router","Router","mergeParams","get","confirmUserCredentials","req","res","findOneEntryAndPopulate","params","username","client","render","user","loggedIn","foundClient","group","foundGroup","messages","users","post","sender","newM","content","body","textareacontent","createEntryAndSave","newMessage","push","savePopulatedEntry","assignNotification","substr","redirect","oneClient","forEach","receiver","module","exports"],"mappings":"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","file":"messages.js","sourcesContent":["// Packages\nvar express = require(\"express\"),\n    authServices = require('../services/auth-services'),\n    notifServices = require('../services/notif-services'), \n    dbopsServices = require('../services/dbops-services');\n\n// Models\nvar User = require(\"../models/user\"),\n    Group = require(\"../models/group\"),\n    Message = require(\"../models/comment\");\n\nvar router = express.Router({ mergeParams: true });\n\n// Show Personal Messages\nrouter.get('/personal/', authServices.confirmUserCredentials, async function(req, res) {\n    let client = await dbopsServices.findOneEntryAndPopulate(User, { 'username': req.params.username }, [ 'messages' ], req, res);\n    res.render('personalMessages', { user: client, loggedIn: true, client: client });\n});\n\n// Show Group Messages\nrouter.get('/group/', authServices.confirmUserCredentials, async function(req, res) {\n    let foundClient = await dbopsServices.findOneEntryAndPopulate(User, { 'username': req.params.username }, [], req, res),\n        foundGroup = await dbopsServices.findOneEntryAndPopulate(Group, { 'name': foundClient.group }, [ 'messages', 'users' ], req, res);\n    res.render('groupMessages', { messages: foundGroup['messages'], loggedIn: true, user: foundClient, users: foundGroup.users, client: foundClient });\n});\n\n// New Personal Message\nrouter.post('/personal/', authServices.confirmUserCredentials, async function(req, res) {\n    let foundClient = await dbopsServices.findOneEntryAndPopulate(User, { 'username': req.params.username }, [], req, res),\n        sender = req.user,\n        newM = new Message({ username: sender.username, content: req.body.textareacontent }),\n        newMessage = await dbopsServices.createEntryAndSave(Message, newM, req, res);\n\n    foundClient.messages.push(newMessage);\n    dbopsServices.savePopulatedEntry(foundClient, req, res);\n    notifServices.assignNotification(sender.username, newMessage.content.substr(0, 30) + '...', 'msg', foundClient.username, req);\n    res.redirect('/index/' + foundClient.username + '/messages/personal');\n});\n\n// New Group Message\nrouter.post('/group/', authServices.confirmUserCredentials, async function(req, res) {\n    let sender = req.user,\n        oneClient = await dbopsServices.findOneEntryAndPopulate(User, { 'username': req.params.username }, [], req, res),\n        foundGroup = await dbopsServices.findOneEntryAndPopulate(Group, { 'name': oneClient.group }, [ 'users' ], req, res),\n        newM = new Message({ username: sender.username, content: req.body.textareacontent }),\n        newMessage = await dbopsServices.createEntryAndSave(Message, newM, req, res);\n        foundGroup.messages.push(newMessage);\n        dbopsServices.savePopulatedEntry(foundGroup, req, res);\n        foundGroup.users.forEach(function(receiver) {\n            notifServices.assignNotification(sender.username, newMessage.content.substr(0, 30) + '...', 'msg-group', receiver.username, req);\n        });\n        res.redirect('back');\n});\n\nmodule.exports = router;"]}
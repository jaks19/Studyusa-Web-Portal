{"version":3,"sources":["../../routes/notifs.js"],"names":["express","require","authServices","notifServices","dbopsServices","Notif","User","format","router","Router","mergeParams","get","confirmUserCredentials","req","res","findOneEntryAndPopulate","params","username","foundUser","getBothSeenAndUnseenNotifs","notifs","unseenNotifs","seenNotifs","render","user","loggedIn","reverse","client","id","foundNotif","seen","savePopulatedEntry","redirect","module","exports"],"mappings":";;;;;;;;;;;;;;;;AAAA;AACA,IAAIA,UAAUC,QAAQ,SAAR,CAAd;AAAA,IACIC,eAAeD,QAAQ,2BAAR,CADnB;AAAA,IAEIE,gBAAgBF,QAAQ,4BAAR,CAFpB;AAAA,IAGIG,gBAAgBH,QAAQ,4BAAR,CAHpB;;AAKA;AACA,IAAII,QAAQJ,QAAQ,iBAAR,CAAZ;AAAA,IACIK,OAAQL,QAAQ,gBAAR,CADZ;AAAA,IAEIM,SAASN,QAAQ,cAAR,CAFb;;AAIA;AACA,IAAIO,SAASR,QAAQS,MAAR,CAAe,EAAEC,aAAa,IAAf,EAAf,CAAb;;AAEA;AACAF,OAAOG,GAAP,CAAW,GAAX,EAAgBT,aAAaU,sBAA7B;AAAA,0EAAqD,iBAAeC,GAAf,EAAoBC,GAApB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAC3BV,cAAcW,uBAAd,CAAsCT,IAAtC,EAA4C,EAAE,YAAaO,IAAIG,MAAJ,CAAWC,QAA1B,EAA5C,EAAkF,CAAE,QAAF,CAAlF,EAAgGJ,GAAhG,EAAqGC,GAArG,CAD2B;;AAAA;AAC7CI,iCAD6C;AAAA,gDAEhBf,cAAcgB,0BAAd,CAAyCD,UAAUE,MAAnD,CAFgB;AAAA;AAE5CC,oCAF4C;AAE9BC,kCAF8B;;;AAI7CR,4BAAIS,MAAJ,CAAW,QAAX,EAAqB;AACjBC,kCAAMN,SADW;AAEjBO,sCAAU,IAFO;AAGjBlB,oCAAQA,MAHS;AAIjBc,0CAAcA,aAAaK,OAAb,EAJG;AAKjBJ,wCAAYA,WAAWI,OAAX,EALK;AAMjBC,oCAAQT;AANS,yBAArB;;AAJ6C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAArD;;AAAA;AAAA;AAAA;AAAA;;AAcA;AACAV,OAAOG,GAAP,CAAW,aAAX,EAA0BT,aAAaU,sBAAvC;AAAA,2EAA+D,kBAAeC,GAAf,EAAoBC,GAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BACpCV,cAAcW,uBAAd,CAAsCV,KAAtC,EAA6C,EAAE,OAAOQ,IAAIG,MAAJ,CAAWY,EAApB,EAA7C,EAAuE,EAAvE,EAA2Ef,GAA3E,EAAgFC,GAAhF,CADoC;;AAAA;AACvDe,kCADuD;;AAE3DA,mCAAWC,IAAX,GAAkB,CAACD,WAAWC,IAA9B;AACA1B,sCAAc2B,kBAAd,CAAiCF,UAAjC,EAA6ChB,GAA7C,EAAkDC,GAAlD;AACAA,4BAAIkB,QAAJ,CAAa,MAAb;;AAJ2D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA/D;;AAAA;AAAA;AAAA;AAAA;;AAOAC,OAAOC,OAAP,GAAiB1B,MAAjB","file":"notifs.js","sourcesContent":["// Packages\nlet express = require(\"express\"),\n    authServices = require('../services/auth-services'),\n    notifServices = require('../services/notif-services'),\n    dbopsServices = require('../services/dbops-services');\n\n// Models\nlet Notif = require(\"../models/notif\"),\n    User  = require(\"../models/user\"),\n    format = require('../notifJson');\n\n// To be Exported\nvar router = express.Router({ mergeParams: true });\n\n// View Notifs\nrouter.get('/', authServices.confirmUserCredentials, async function(req, res) {\n    let foundUser = await dbopsServices.findOneEntryAndPopulate(User, { 'username' : req.params.username }, [ 'notifs' ], req, res),\n        [unseenNotifs, seenNotifs] = notifServices.getBothSeenAndUnseenNotifs(foundUser.notifs);\n        \n        res.render('notifs', {\n            user: foundUser,\n            loggedIn: true,\n            format: format,\n            unseenNotifs: unseenNotifs.reverse(),\n            seenNotifs: seenNotifs.reverse(),\n            client: foundUser\n        });\n});\n\n// Notif Toggling seen-unseen\nrouter.get('/:id/toggle', authServices.confirmUserCredentials, async function(req, res) {\n    let foundNotif = await dbopsServices.findOneEntryAndPopulate(Notif, { '_id': req.params.id }, [], req, res);\n    foundNotif.seen = !foundNotif.seen;\n    dbopsServices.savePopulatedEntry(foundNotif, req, res);\n    res.redirect('back');\n});\n\nmodule.exports = router;\n"]}
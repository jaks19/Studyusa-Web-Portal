{"version":3,"sources":["../../../services/dbops-services/index.js"],"names":["require","dbopsServices","findOneEntryAndPopulate","model","entryRequirement","fieldsArray","req","res","entry","findOne","length","fieldsString","join","populate","exec","flash","redirect","findAllEntriesAndPopulate","entries","find","promiseToCreateEntry","modelObjectWithData","resolve","reject","create","error","newEntry","createEntryAndSave","save","data","savePopulatedEntry","populatedEntry","savedEntry","promiseTofindEntryByIdAndRemove","id","findByIdAndRemove","findEntryByIdAndRemove","module","exports"],"mappings":"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","file":"index.js","sourcesContent":["require(\"babel-polyfill\")\n\n'use strict';\n\nvar dbopsServices = {};\n\ndbopsServices.findOneEntryAndPopulate = async function findOneEntryAndPopulate(model, entryRequirement, fieldsArray, req, res) {\n  let entry = model.findOne(entryRequirement);\n  if (fieldsArray.length > 0) {\n    let fieldsString = fieldsArray.join(' ');\n    try {\n          entry = await entry.populate(fieldsString).exec();\n      } catch (err) {\n          req.flash('error', err);\n          res.redirect('back');\n          return;\n      }\n  }\n  return entry;\n}\n\ndbopsServices.findAllEntriesAndPopulate = async function findAllEntriesAndPopulate(model, entryRequirement, fieldsArray, req, res) {\n  let entries = model.find(entryRequirement);\n  if (fieldsArray.length > 0) {\n    let fieldsString = fieldsArray.join(' ');\n    try {\n          entries = await entries.populate(fieldsString).exec();\n      } catch (err) {\n          req.flash('error', err);\n          res.redirect('back');\n          return;\n      }\n  }\n  return entries;\n}\n\nfunction promiseToCreateEntry(model, modelObjectWithData){\n  return new Promise(function (resolve, reject) {\n    model.create(modelObjectWithData, function(error, newEntry){\n        if (error) { reject(error) }\n        else { resolve(newEntry) }\n    });\n  });\n}\n\ndbopsServices.createEntryAndSave = async function createEntryAndSave(model, modelObjectWithData, req, res, save = true) { \n  var newEntry;\n  try { newEntry = await promiseToCreateEntry(model, modelObjectWithData) }\n  catch(error) { \n    req.flash('error', 'error creating entry');\n    res.redirect('back');\n    return;\n  }\n  if (save) {\n    newEntry.save(function(error, data){\n      if (error){ req.flash('error', error) } \n    });\n  }\n  return newEntry;\n}\n\ndbopsServices.savePopulatedEntry = function savePopulatedEntry(populatedEntry, req, res) {    \n  populatedEntry.save(function(error, savedEntry){\n    if (error) {\n            req.flash('error', error);\n            res.redirect('back');\n    }\n  });\n}\n\nfunction promiseTofindEntryByIdAndRemove(model, id, req, res){\n  return new Promise(function (resolve, reject) {\n    model.findByIdAndRemove(id, function(error){\n        if (error){ reject(error) }\n        else { resolve() }\n    });\n  });\n}\n\ndbopsServices.findEntryByIdAndRemove = async function findEntryByIdAndRemove(model, id, req, res) {    \n  try { \n    await promiseTofindEntryByIdAndRemove(model, id, req, res) \n    req.flash('success', 'Deletion Successful');\n  }\n  catch (error) { req.flash('error', 'Could not remove entry from the database') }\n  return;\n}\n\nmodule.exports = dbopsServices;"]}
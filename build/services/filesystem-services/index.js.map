{"version":3,"sources":["../../../services/filesystem-services/index.js"],"names":["filesystemServices","mkdirp","require","path","fs","multiparty","getPromiseToParseForm","req","resolve","reject","form","Form","parse","error","fields","files","getAddedFileName","res","file","fileName","flash","getNewFileMetadata","fileData","message","title","redirect","module","exports"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA,IAAIA,qBAAqB,EAAzB;;AAEA,IAAIC,SAASC,QAAQ,QAAR,CAAb;AAAA,IACIC,OAAOD,QAAQ,MAAR,CADX;AAAA,IAEIE,KAAKF,QAAQ,IAAR,CAFT;AAAA,IAEwB;AACpBG,aAAaH,QAAQ,YAAR,CAHjB,C,CAGwC;;AAExC,SAASI,qBAAT,CAA+BC,GAA/B,EAAoC;AAChC;AACA,WAAO,sBAAY,UAAUC,OAAV,EAAmBC,MAAnB,EAA2B;AAC1C,YAAIC,OAAO,IAAIL,WAAWM,IAAf,EAAX;AACAD,aAAKE,KAAL,CAAWL,GAAX,EAAgB,UAASM,KAAT,EAAgBC,MAAhB,EAAwBC,KAAxB,EAA8B;AAC1C,gBAAIF,KAAJ,EAAW;AAAEJ,uBAAOI,KAAP;AAAe,aAA5B,MACK;AAAEL,wBAAQ,CAAEM,MAAF,EAAUC,KAAV,CAAR;AAA4B;AACtC,SAHD;AAIH,KANM,CAAP;AAOH;;AAEDf,mBAAmBgB,gBAAnB;AAAA,0EAAsC,iBAAgCT,GAAhC,EAAqCU,GAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAEZX,sBAAsBC,GAAtB,CAFY;;AAAA;AAE1BW,4BAF0B,iBAEgB,CAFhB,EAEmB,KAFnB,EAE0B,CAF1B;AAG1BC,gCAH0B,GAGfD,KAAK,kBAAL,CAHe;AAAA,yDAIvBC,QAJuB;;AAAA;AAAA;AAAA;AAMlBZ,4BAAIa,KAAJ,CAAU,OAAV;AANkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAtC;;AAAA,aAAqDJ,gBAArD;AAAA;AAAA;;AAAA,WAAqDA,gBAArD;AAAA;;AASAhB,mBAAmBqB,kBAAnB;AAAA,2EAAwC,kBAAkCd,GAAlC,EAAuCU,GAAvC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAChCK,gCADgC,GACrB,EADqB;AAAA;AAAA;AAAA,+BAGFhB,sBAAsBC,GAAtB,CAHE;;AAAA;AAAA;AAAA;AAG1BO,8BAH0B;AAGlBC,6BAHkB;;AAIhCO,iCAASC,OAAT,GAAmBT,OAAO,SAAP,EAAkB,CAAlB,CAAnB;AACAQ,iCAASE,KAAT,GAAiBV,OAAO,OAAP,EAAgB,CAAhB,CAAjB;AACAQ,iCAASH,QAAT,GAAoBJ,MAAM,KAAN,EAAa,CAAb,EAAgB,kBAAhB,CAApB;AANgC,0DAOzBO,QAPyB;;AAAA;AAAA;AAAA;;AAUhCf,4BAAIa,KAAJ,CAAU,OAAV,EAAmB,kCAAnB;AACAH,4BAAIQ,QAAJ,CAAa,MAAb;;AAXgC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAxC;;AAAA,aAAuDJ,kBAAvD;AAAA;AAAA;;AAAA,WAAuDA,kBAAvD;AAAA;;AAeAK,OAAOC,OAAP,GAAiB3B,kBAAjB","file":"index.js","sourcesContent":["var filesystemServices = {};\n\nlet mkdirp = require('mkdirp'),\n    path = require('path'),\n    fs = require(\"fs\"), // To read-from/write-to files\n    multiparty = require(\"multiparty\"); // To get file object upon selection from pc for upload\n\nfunction getPromiseToParseForm(req) {\n    // form.parse needs a callback so we make this wrapper to give back a promise instead\n    return new Promise(function (resolve, reject) {\n        let form = new multiparty.Form();\n        form.parse(req, function(error, fields, files){\n            if (error) { reject(error) }\n            else { resolve([ fields, files ]) }\n        });\n    });\n}\n\nfilesystemServices.getAddedFileName = async function getAddedFileName(req, res) {\n    try { \n        let file = (await getPromiseToParseForm(req))[1]['doc'][0],\n            fileName = file['originalFilename'];\n        return fileName;\n    } \n    catch (error) { req.flash('error', error) }\n}\n\nfilesystemServices.getNewFileMetadata = async function getNewFileMetadata(req, res) {\n    let fileData = {};\n    try { \n        let [ fields, files ] = await getPromiseToParseForm(req);\n        fileData.message = fields['message'][0];\n        fileData.title = fields['title'][0];\n        fileData.fileName = files['doc'][0]['originalFilename'];\n        return fileData;\n    } \n    catch (error) { \n        req.flash('error', 'Could not retrieve file metadata');\n        res.redirect('back');\n    }\n}\n\nmodule.exports = filesystemServices;"]}
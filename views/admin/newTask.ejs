<% include ../partials/headerUser %>

<form id='form-submit' action='/index/<%=user.username%>/tasks/new' method='POST' enctype='multipart/form-data'>

    <div class='row'>
        <div class='col-xs-12 col-md-12' align='center'>
            <input name='title' type="text" class="search" placeholder="Enter Task Title" required style='margin-bottom:3%;'>
        </div>
    </div>

    <div class='row'>
        <div class='col-xs-12' style='max-width: 90%; margin-left: 5%;' align='center'>
            <textarea name='prompt' id='area' style='margin-bottom:5%;'></textarea>
        </div>
    </div>

    <button type="submit" class="btn btn-success">Save</button><br>

</form>

<script src="/front-end/tinyMCEScript.js" type="text/javascript"></script>

<script>

// pre-submit callback
function preSubmit(formData, jqForm, options) {

    // formData is an array; here we use $.param to convert it to a string to display it
    // but the form plugin does this for you automatically when it submits the data
    var queryString = $.param(formData);

    // jqForm is a jQuery object encapsulating the form element.  To access the
    // DOM element for the form do this:
    // var formElement = jqForm[0];

    alert('About to submit: \n\n' + queryString);

    // here we could return false to prevent the form from being submitted;
    // returning anything other than false will allow the form submit to continue
    return true;
}

// post-submit callback
function postSubmit(responseText, statusText, xhr, $form)  {
    // if the ajaxSubmit method was passed an Options Object with the dataType
    // property set to 'xml' or json etc then server response: 'responseText'
    // is in that format

    alert('status: ' + statusText + '\n\nresponseText: \n' + responseText +
        '\n\nThe output div should have already been updated with the responseText.');

    tinymce.get('area').setMode('readonly');

    return true;
}



// $(document).ready(function() {
//     var options = {
//         beforeSubmit: preSubmit,
//         success: postSubmit
//     };
//
//     // other available options:1
//     // target:    '#output2',   // target element(s) to be updated with server response
//     //url:        url,          // override for form's 'action' attribute
//     //type:       type,         // 'get' or 'post', override for form's 'method' attribute
//     //dataType:   null,         // 'xml', 'script', or 'json' (expected server response type)
//     // clearForm: false,        // clear all form fields after successful submit
//     //resetForm:  true          // reset the form after successful submit
//
//     // $.ajax options can be used here too, for example:
//     //timeout:   3000
//
//
//     // Bind the form and when press save, an ajax post request is sent in the background
//     $("#form-submit").ajaxForm(options);
// });

</script>



<style>
input {
    padding: 0.8% 1.2%;
    background-color: white;
    border: solid 1px rgba(0, 0, 0, 0.2);
    width: 35%;
    box-sizing: border-box;
    color: #3e9ddc;
    margin-bottom: 5px;
    text-align: center;
}

input:focus, textarea, button:focus {
    outline: none !important;
}

.new button {
    font-size: 100%;
    padding: 5px 15px;
    border-radius: 25px;
    border: none;
    text-decoration: none;
    margin: 2px 0;
}

a:link,
a:visited,
a:hover,
a:active
{
   color: #3498db;
   text-decoration: none;
}

::-webkit-input-placeholder { /* Chrome/Opera/Safari */
  color: #777777b8;

}
::-moz-placeholder { /* Firefox 19+ */
  color: #777777b8;

}
:-ms-input-placeholder { /* IE 10+ */
  color: #777777b8;

}
:-moz-placeholderc { /* Firefox 18- */
  color: #777777b8;
}

body{
    background:#eee;
}
</style>
